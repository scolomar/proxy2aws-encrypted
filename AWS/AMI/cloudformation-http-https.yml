---

AWSTemplateFormatVersion: "2010-09-09"

Description: This template creates a new VPC and deploys a production-grade HA cluster in AWS

#============================================================
# UI Definition
#============================================================
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: Network Configuration
        Parameters:
          - HostedZoneName
          - SecurityGroupCidrIpWorkerAWS2PREM
          - SecurityGroupCidrIpWorkerAWS2CLOUD
          - SubnetCidrBlockPrivate1
          - SubnetCidrBlockPrivate2
          - SubnetCidrBlockPrivate3
          - SubnetCidrBlockPublic1
          - SubnetCidrBlockPublic2
          - SubnetCidrBlockPublic3
          - VPCCidrBlock
      -
        Label:
          default: Security
        Parameters:
          - Identifier
          - KeyName
      -
        Label:
          default: Cluster Manager Configuration
        Parameters:
          - InstanceManagerImageId
          - InstanceManagerInstanceType
      -
        Label:
          default: Cluster Worker Configuration
        Parameteres:
          - InstanceWorkerImageId
          - InstanceWorkerInstanceType
          
    ParameterLabels:
      HostedZoneName:
        default: The name of the hosted zone that you want to create records in
      Identifier:
        default: The Identifier of the certificate you want to use
      InstanceManagerImageId:
        default: AMI to use for Cluster Manager Instances
      InstanceManagerInstanceType:
        default: Cluster Manager Instance Size
      InstanceWorkerImageId:
        default: AMI to use for Cluster Worker Instances
      InstanceWorkerInstanceType:
        default: Cluster Worker Instance Size
      KeyName:
        default: The name of the key pair
      SecurityGroupCidrIpWorkerAWS2PREM:
        default: Allowed CIDR for ALB AWS2PREM Cluster Worker Access
      SecurityGroupCidrIpWorkerAWS2CLOUD:
        default: Allowed CIDR for ALB AWS2CLOUD Cluster Worker Access
      SubnetCidrBlockPrivate1:
        default: Private Subnet 1 CIDR
      SubnetCidrBlockPrivate2:
        default: Private Subnet 2 CIDR
      SubnetCidrBlockPrivate3:
        default: Private Subnet 3 CIDR
      SubnetCidrBlockPublic1:
        default: Public Subnet 1 CIDR
      SubnetCidrBlockPublic2:
        default: Public Subnet 2 CIDR
      SubnetCidrBlockPublic3:
        default: Public Subnet 3 CIDR
      VPCCidrBlock:
        default: VPC CIDR
                
Parameters:

  HostedZoneName:
    Type: String
    Description: >
      The name of the hosted zone that you want to create records in.
    Default: 'sebastian-colomar.com'

  Identifier:
    Type: String
    Description: >
      The Identifier of the certificate you want to use.
    Default: 'c3f3310b-f4ed-4874-8849-bd5c2cfe001f'

  InstanceManagerImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: >
      Select AMI to use for the Cluster Manager instances. 
      When it's left blank, the default AMI for your AWS region will be used. 
      When setting an AMI, it must be available in your current region.
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    
  InstanceManagerInstanceType:
    Type: String
    Description: >
      Select Amazon EC2 instance type for the Cluster Manager instances.
    Default: t3a.nano
    ConstraintDescription: >
      Choose an instance type.
    AllowedValues:
      - t2.nano
      - t2.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
    
  InstanceWorkerImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Description: >
      Select AMI to use for the Cluster Worker instances. 
      When it's left blank, the default AMI for your AWS region will be used. 
      When setting an AMI, it must be available in your current region.
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
    
  InstanceWorkerInstanceType:
    Type: String
    Description: >
      Select Amazon EC2 instance type for the Cluster Worker instances.
    Default: t3a.nano
    ConstraintDescription: >
      Choose an instance type.
    AllowedValues:
      - t2.nano
      - t2.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
    
  KeyName:
    Type: String
    Description: >
      The name of the key pair. You can create a key pair using CreateKeyPair or ImportKeyPair.
    Default: proxy2aws
    
  SecurityGroupCidrIpWorkerAWS2PREM:
    Type: String
    Description: >
      Allowed CIDR block for external web access to the Cluster Worker AWS2PREM Load Balancer. 
      It defines the block of IPs that can access the Cluster Worker Load Balancer 1 and, consequently, the application servers. 
      Set it to 0.0.0.0/0 to make it accessible from anywhere.
    Default: 0.0.0.0/0
    
  SecurityGroupCidrIpWorkerAWS2CLOUD:
    Type: String
    Description: >
      Allowed CIDR block for external web access to the Cluster Worker AWS2CLOUD Load Balancer. 
      It defines the block of IPs that can access the Cluster Worker Load Balancer 2 and, consequently, the application servers. 
      Set it to 0.0.0.0/0 to make it accessible from anywhere.
    Default: 0.0.0.0/0
    
  SubnetCidrBlockPrivate1:
    Type: String
    Description: >
      CIDR block for private subnet located in Availability Zone 1. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 10.168.1.0/24
    
  SubnetCidrBlockPrivate2:
    Type: String
    Description: >
      CIDR block for private subnet located in Availability Zone 2. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 10.168.3.0/24
    
  SubnetCidrBlockPrivate3:
    Type: String
    Description: >
      CIDR block for private subnet located in Availability Zone 3. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 10.168.5.0/24
    
  SubnetCidrBlockPublic1:
    Type: String
    Description: >
      CIDR block for public (DMZ) subnet located in Availability Zone 1. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 10.168.2.0/24
    
  SubnetCidrBlockPublic2:
    Type: String
    Description: >
      CIDR block for public (DMZ) subnet located in Availability Zone 2. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 10.168.4.0/24
    
  SubnetCidrBlockPublic3:
    Type: String
    Description: >
      CIDR block for public (DMZ) subnet located in Availability Zone 3. 
      All resources located on this subnet are provided an IP within this address block. 
    Default: 10.168.6.0/24
    
  VPCCidrBlock:
    Type: String
    Description: >
      CIDR block for the VPC. All the subnets and resources will have an IP within this address block.
    Default: 10.168.0.0/16
    
#============================================================
# Resources
#============================================================
Resources:

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCidrBlock

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RoutePublic:
    Type: AWS::EC2::Route
    DependsOn: [VPCGatewayAttachment]
    Properties:
      RouteTableId: !Ref RouteTablePublic
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPublic1
      VpcId: !Ref VPC

  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPublic2
      VpcId: !Ref VPC

  SubnetPublic3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPublic3
      VpcId: !Ref VPC

  SubnetRouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic1

  SubnetRouteTableAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic2

  SubnetRouteTableAssociationPublic3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref SubnetPublic3

  SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPrivate1
      VpcId: !Ref VPC

  SubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPrivate2
      VpcId: !Ref VPC

  SubnetPrivate3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Ref SubnetCidrBlockPrivate3
      VpcId: !Ref VPC

  RouteTablePrivate1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteTablePrivate2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteTablePrivate3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  SubnetRouteTableAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      SubnetId: !Ref SubnetPrivate1

  SubnetRouteTableAssociationPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      SubnetId: !Ref SubnetPrivate2

  SubnetRouteTableAssociationPrivate3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref RouteTablePrivate3
      SubnetId: !Ref SubnetPrivate3

  EIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  EIP3:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt EIP1.AllocationId
      SubnetId: !Ref SubnetPublic1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt EIP2.AllocationId
      SubnetId: !Ref SubnetPublic2

  NatGateway3:
    Type: AWS::EC2::NatGateway
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt EIP3.AllocationId
      SubnetId: !Ref SubnetPublic3

  RoutePrivate1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate1
      NatGatewayId: !Ref NatGateway1
      DestinationCidrBlock: 0.0.0.0/0

  RoutePrivate2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate2
      NatGatewayId: !Ref NatGateway2
      DestinationCidrBlock: 0.0.0.0/0

  RoutePrivate3:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate3
      NatGatewayId: !Ref NatGateway3
      DestinationCidrBlock: 0.0.0.0/0

  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref Role]

  InstanceManager1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceManagerImageId
      InstanceType: !Ref InstanceManagerInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetPrivate1
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/AMI/node.sh && ./docker/AWS/install/AMI/node.sh && rm -rf docker
            
  InstanceManager2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceManagerImageId
      InstanceType: !Ref InstanceManagerInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetPrivate2
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/AMI/node.sh && ./docker/AWS/install/AMI/node.sh && rm -rf docker

  InstanceManager3:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceManagerImageId
      InstanceType: !Ref InstanceManagerInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetPrivate3
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/AMI/node.sh && ./docker/AWS/install/AMI/node.sh && rm -rf docker

  InstanceWorker1:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceWorkerImageId
      InstanceType: !Ref InstanceWorkerInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetPrivate1
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/AMI/node.sh && ./docker/AWS/install/AMI/node.sh && rm -rf docker

  InstanceWorker2:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceWorkerImageId
      InstanceType: !Ref InstanceWorkerInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetPrivate2
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/AMI/node.sh && ./docker/AWS/install/AMI/node.sh && rm -rf docker

  InstanceWorker3:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !Ref InstanceWorkerImageId
      InstanceType: !Ref InstanceWorkerInstanceType
      KeyName: !Ref KeyName
      SubnetId: !Ref SubnetPrivate3
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/sh
            cd /tmp && curl https://amazon-ssm-${AWS::Region}.s3.amazonaws.com/latest/linux_amd64/amazon-ssm-agent.rpm -o amazon-ssm-agent.rpm && sudo yum install -y amazon-ssm-agent.rpm
            sudo yum install -y git && git clone https://github.com/secobau/docker.git && chmod +x docker/AWS/install/AMI/node.sh && ./docker/AWS/install/AMI/node.sh && rm -rf docker

  SecurityGroupWorkerAWS2PREM:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS access to the applications running on the cluster of workers
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref SecurityGroupCidrIpWorkerAWS2PREM
      
  SecurityGroupWorkerAWS2CLOUD:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access to the applications running on the cluster of workers
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref SecurityGroupCidrIpWorkerAWS2CLOUD
      
  LoadBalancerWorkerAWS2PREM:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      SecurityGroups:
        - !Ref SecurityGroupWorkerAWS2PREM
        - !GetAtt VPC.DefaultSecurityGroup
      Subnets: 
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
        - !Ref SubnetPublic3
        
  LoadBalancerWorkerAWS2CLOUD:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      SecurityGroups:
        - !Ref SecurityGroupWorkerAWS2CLOUD
        - !GetAtt VPC.DefaultSecurityGroup
      Subnets: 
        - !Ref SubnetPublic1
        - !Ref SubnetPublic2
        - !Ref SubnetPublic3
        
  RecordSetAWS2PREM:
    Type: AWS::Route53::RecordSet
    Properties: 
      AliasTarget: 
        DNSName: !GetAtt LoadBalancerWorkerAWS2PREM.DNSName
        HostedZoneId: !GetAtt LoadBalancerWorkerAWS2PREM.CanonicalHostedZoneID
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub 'aws2prem.${HostedZoneName}'
      Type: A
      
  RecordSetAWS2CLOUD:
    Type: AWS::Route53::RecordSet
    Properties: 
      AliasTarget: 
        DNSName: !GetAtt LoadBalancerWorkerAWS2CLOUD.DNSName
        HostedZoneId: !GetAtt LoadBalancerWorkerAWS2CLOUD.CanonicalHostedZoneID
      HostedZoneName: !Sub '${HostedZoneName}.'
      Name: !Sub 'aws2cloud.${HostedZoneName}'
      Type: A
      
  TargetGroupWorkerAWS2PREM:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckPath: /
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      Port: 8080
      Protocol: HTTP
      Targets: 
        -   Id: !Ref InstanceWorker1
        -   Id: !Ref InstanceWorker2
        -   Id: !Ref InstanceWorker3
      TargetType: instance
      VpcId: !Ref VPC

  TargetGroupWorkerAWS2CLOUD:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckPath: /
      HealthCheckPort: 8888
      HealthCheckProtocol: HTTP
      Port: 8888
      Protocol: HTTP
      Targets: 
        -   Id: !Ref InstanceWorker1
        -   Id: !Ref InstanceWorker2
        -   Id: !Ref InstanceWorker3
      TargetType: instance
      VpcId: !Ref VPC

  ListenerWorkerAWS2PREM:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      Certificates:
        - CertificateArn: !Sub 'arn:aws:acm:${AWS::Region}:${AWS::AccountId}:certificate/${Identifier}'
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroupWorkerAWS2PREM
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerWorkerAWS2PREM
      Port: 443
      Protocol: HTTPS
 
  ListenerWorkerAWS2CLOUD:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - TargetGroupArn: !Ref TargetGroupWorkerAWS2CLOUD
          Type: forward
      LoadBalancerArn: !Ref LoadBalancerWorkerAWS2CLOUD
      Port: 80
      Protocol: HTTP
 
